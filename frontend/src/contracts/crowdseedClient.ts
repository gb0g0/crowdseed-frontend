/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "read_owner()address": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "read_campaigns()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "add_campaign(string,string,string,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool)": {
      "read_only": true,
      "structs": {
        "output": {
          "name": "CampaignRecord",
          "elements": [
            [
              "name",
              "string"
            ],
            [
              "desc",
              "string"
            ],
            [
              "goal",
              "uint64"
            ],
            [
              "amount_raised",
              "uint64"
            ],
            [
              "deadline",
              "uint64"
            ],
            [
              "creator",
              "address"
            ],
            [
              "status",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_campaign(string)(string,string,uint64,uint64,uint64,address,bool)": {
      "read_only": true,
      "structs": {
        "output": {
          "name": "CampaignRecord",
          "elements": [
            [
              "name",
              "string"
            ],
            [
              "desc",
              "string"
            ],
            [
              "goal",
              "uint64"
            ],
            [
              "amount_raised",
              "uint64"
            ],
            [
              "deadline",
              "uint64"
            ],
            [
              "creator",
              "address"
            ],
            [
              "status",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "send_algo_from_escrow(account,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fund_campaign(pay,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fund_escrow_address(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "owner": {
          "type": "bytes",
          "key": "owner",
          "descr": ""
        },
        "totalCampaign": {
          "type": "uint64",
          "key": "totalCampaign",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "CrowdSeed",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "read_owner",
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "read_campaigns",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "add_campaign",
        "args": [
          {
            "type": "string",
            "name": "new_camp"
          },
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "string",
            "name": "desc"
          },
          {
            "type": "uint64",
            "name": "goal"
          },
          {
            "type": "uint64",
            "name": "deadline"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approveCampaign",
        "args": [
          {
            "type": "string",
            "name": "new_camp"
          }
        ],
        "returns": {
          "type": "(string,string,uint64,uint64,uint64,address,bool)"
        }
      },
      {
        "name": "get_campaign",
        "args": [
          {
            "type": "string",
            "name": "new_camp"
          }
        ],
        "returns": {
          "type": "(string,string,uint64,uint64,uint64,address,bool)"
        }
      },
      {
        "name": "send_algo_from_escrow",
        "args": [
          {
            "type": "account",
            "name": "receiver"
          },
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fund_campaign",
        "args": [
          {
            "type": "pay",
            "name": "txn",
            "desc": "The payment transaction to fund the escrow address."
          },
          {
            "type": "string",
            "name": "new_camp"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Fund projects with Algos."
      },
      {
        "name": "fund_escrow_address",
        "args": [
          {
            "type": "pay",
            "name": "txn",
            "desc": "The payment transaction to fund the escrow address."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Fund escrow address with Algos."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the CrowdSeed smart contract.
 */
export type CrowdSeed = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'read_owner()address' | 'read_owner', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'read_campaigns()uint64' | 'read_campaigns', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'add_campaign(string,string,string,uint64,uint64)void' | 'add_campaign', {
      argsObj: {
        new_camp: string
        name: string
        desc: string
        goal: bigint | number
        deadline: bigint | number
      }
      argsTuple: [new_camp: string, name: string, desc: string, goal: bigint | number, deadline: bigint | number]
      returns: void
    }>
    & Record<'approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool)' | 'approveCampaign', {
      argsObj: {
        new_camp: string
      }
      argsTuple: [new_camp: string]
      returns: CampaignRecord
    }>
    & Record<'get_campaign(string)(string,string,uint64,uint64,uint64,address,bool)' | 'get_campaign', {
      argsObj: {
        new_camp: string
      }
      argsTuple: [new_camp: string]
      returns: CampaignRecord
    }>
    & Record<'send_algo_from_escrow(account,uint64)void' | 'send_algo_from_escrow', {
      argsObj: {
        receiver: number | bigint
        amount: bigint | number
      }
      argsTuple: [receiver: number | bigint, amount: bigint | number]
      returns: void
    }>
    & Record<'fund_campaign(pay,string)void' | 'fund_campaign', {
      argsObj: {
        /**
         * The payment transaction to fund the escrow address.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        new_camp: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, new_camp: string]
      returns: void
    }>
    & Record<'fund_escrow_address(pay)void' | 'fund_escrow_address', {
      argsObj: {
        /**
         * The payment transaction to fund the escrow address.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'owner'?: BinaryState
      'totalCampaign'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CrowdSeedSig = keyof CrowdSeed['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CrowdSeedSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a CampaignRecord result as a struct
 */
export type CampaignRecord = {
  name: string
  desc: string
  goal: bigint
  amount_raised: bigint
  deadline: bigint
  creator: string
  status: boolean
}
/**
 * Converts the tuple representation of a CampaignRecord to the struct representation
 */
export function CampaignRecord([name, desc, goal, amount_raised, deadline, creator, status]: [string, string, bigint, bigint, bigint, string, boolean] ) {
  return {
    name,
    desc,
    goal,
    amount_raised,
    deadline,
    creator,
    status,
  }
}
/**
 * Maps a method signature from the CrowdSeed smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CrowdSeedSig> = CrowdSeed['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CrowdSeed smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CrowdSeedSig> = CrowdSeed['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CrowdSeedCreateCalls = (typeof CrowdSeedCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CrowdSeedCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CrowdSeedDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CrowdSeedCreateCalls) => CrowdSeedCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CrowdSeedCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CrowdSeed smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the read_owner()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readOwner(args: MethodArgs<'read_owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'read_owner()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the read_campaigns()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readCampaigns(args: MethodArgs<'read_campaigns()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'read_campaigns()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the add_campaign(string,string,string,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addCampaign(args: MethodArgs<'add_campaign(string,string,string,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add_campaign(string,string,string,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_camp, args.name, args.desc, args.goal, args.deadline],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveCampaign(args: MethodArgs<'approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_camp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_campaign(string)(string,string,uint64,uint64,uint64,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getCampaign(args: MethodArgs<'get_campaign(string)(string,string,uint64,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_campaign(string)(string,string,uint64,uint64,uint64,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_camp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the send_algo_from_escrow(account,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendAlgoFromEscrow(args: MethodArgs<'send_algo_from_escrow(account,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'send_algo_from_escrow(account,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.receiver, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund_campaign(pay,string)void ABI method
   *
   * Fund projects with Algos.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundCampaign(args: MethodArgs<'fund_campaign(pay,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund_campaign(pay,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.new_camp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund_escrow_address(pay)void ABI method
   *
   * Fund escrow address with Algos.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund_escrow_address(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CrowdSeed smart contract
 */
export class CrowdSeedClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined
  add_campaign: any

  /**
   * Creates a new instance of `CrowdSeedClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CrowdSeed['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CrowdSeed smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CrowdSeedDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CrowdSeedCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CrowdSeed smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CrowdSeed smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the read_owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readOwner(args: MethodArgs<'read_owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.readOwner(args, params))
  }

  /**
   * Calls the read_campaigns()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readCampaigns(args: MethodArgs<'read_campaigns()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.readCampaigns(args, params))
  }

  /**
   * Calls the add_campaign(string,string,string,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addCampaign(args: MethodArgs<'add_campaign(string,string,string,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.addCampaign(args, params))
  }

  /**
   * Calls the approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveCampaign(args: MethodArgs<'approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.approveCampaign(args, params), CampaignRecord)
  }

  /**
   * Calls the get_campaign(string)(string,string,uint64,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getCampaign(args: MethodArgs<'get_campaign(string)(string,string,uint64,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.getCampaign(args, params), CampaignRecord)
  }

  /**
   * Calls the send_algo_from_escrow(account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendAlgoFromEscrow(args: MethodArgs<'send_algo_from_escrow(account,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.sendAlgoFromEscrow(args, params))
  }

  /**
   * Calls the fund_campaign(pay,string)void ABI method.
   *
   * Fund projects with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundCampaign(args: MethodArgs<'fund_campaign(pay,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.fundCampaign(args, params))
  }

  /**
   * Calls the fund_escrow_address(pay)void ABI method.
   *
   * Fund escrow address with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdSeedCallFactory.fundEscrowAddress(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CrowdSeed['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get owner() {
        return CrowdSeedClient.getBinaryState(state, 'owner')
      },
      get totalCampaign() {
        return CrowdSeedClient.getIntegerState(state, 'totalCampaign')
      },
    }
  }

  public compose(): CrowdSeedComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readOwner(args: MethodArgs<'read_owner()address'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readOwner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readCampaigns(args: MethodArgs<'read_campaigns()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readCampaigns(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addCampaign(args: MethodArgs<'add_campaign(string,string,string,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addCampaign(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveCampaign(args: MethodArgs<'approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveCampaign(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(CampaignRecord)
        return this
      },
      getCampaign(args: MethodArgs<'get_campaign(string)(string,string,uint64,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getCampaign(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(CampaignRecord)
        return this
      },
      sendAlgoFromEscrow(args: MethodArgs<'send_algo_from_escrow(account,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendAlgoFromEscrow(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fundCampaign(args: MethodArgs<'fund_campaign(pay,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fundCampaign(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fundEscrowAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CrowdSeedComposer
  }
}
export type CrowdSeedComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'bootstrap()void'>]>

  /**
   * Calls the read_owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readOwner(args: MethodArgs<'read_owner()address'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'read_owner()address'>]>

  /**
   * Calls the read_campaigns()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readCampaigns(args: MethodArgs<'read_campaigns()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'read_campaigns()uint64'>]>

  /**
   * Calls the add_campaign(string,string,string,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addCampaign(args: MethodArgs<'add_campaign(string,string,string,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'add_campaign(string,string,string,uint64,uint64)void'>]>

  /**
   * Calls the approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveCampaign(args: MethodArgs<'approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'approveCampaign(string)(string,string,uint64,uint64,uint64,address,bool)'>]>

  /**
   * Calls the get_campaign(string)(string,string,uint64,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCampaign(args: MethodArgs<'get_campaign(string)(string,string,uint64,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'get_campaign(string)(string,string,uint64,uint64,uint64,address,bool)'>]>

  /**
   * Calls the send_algo_from_escrow(account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendAlgoFromEscrow(args: MethodArgs<'send_algo_from_escrow(account,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'send_algo_from_escrow(account,uint64)void'>]>

  /**
   * Calls the fund_campaign(pay,string)void ABI method.
   *
   * Fund projects with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundCampaign(args: MethodArgs<'fund_campaign(pay,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'fund_campaign(pay,string)void'>]>

  /**
   * Calls the fund_escrow_address(pay)void ABI method.
   *
   * Fund escrow address with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, MethodReturn<'fund_escrow_address(pay)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the CrowdSeed smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): CrowdSeedComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CrowdSeedComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<CrowdSeedComposerResults<TReturns>>
}
export type CrowdSeedComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
